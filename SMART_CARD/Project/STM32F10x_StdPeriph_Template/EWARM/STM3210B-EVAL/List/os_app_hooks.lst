###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.7.9843/W32 for ARM        01/Feb/2018  10:27:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_app_hooks.c
#    Command line =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_app_hooks.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210B_EVAL -lcN
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List
#        -o
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\BSP\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-CPU\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-LIB\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-LIB\Ports\ARM-Cortex-M3\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uCOS-III\Source\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Utility\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart1\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart2\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\user_debug\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\dev_manage\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\modem\sim800\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\protocol_communication\protocol_jt808\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\rtc\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\gps\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart3\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\modem\quecelMC20\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\rf\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\internal_flash\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List\os_app_hooks.lst
#    Object file  =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj\os_app_hooks.o
#
###############################################################################

D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_app_hooks.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                     uC/OS-III
      4          *                                                The Real-Time Kernel
      5          *
      6          *                                       (c) Copyright 2009, Micrium, Weston, FL
      7          *                                                 All Rights Reserved
      8          *                                                    www.Micrium.com
      9          *
     10          *                                                  APPLICATION HOOKS
     11          *
     12          * File    : OS_APP_HOOKS.C
     13          * By      : JJL
     14          * Version : V3.00
     15          *
     16          * LICENSING TERMS:
     17          * ---------------
     18          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     19          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     20          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     21          *           application/product.   We provide ALL the source code for your convenience and to help you 
     22          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     23          *           it commercially without paying a licensing fee.
     24          *
     25          *           Knowledge of the source code may NOT be used to develop a similar product.
     26          *
     27          *           Please help us continue to provide the embedded community with the finest software available.
     28          *           Your honesty is greatly appreciated.
     29          *
     30          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     31          ************************************************************************************************************************
     32          */
     33          
     34          #include <os.h>
     35          #include <os_app_hooks.h>
     36          
     37          /*$PAGE*/
     38          /*
     39          ************************************************************************************************************************
     40          *                                              SET ALL APPLICATION HOOKS
     41          *
     42          * Description: Set ALL application hooks.
     43          *
     44          * Arguments  : none.
     45          *
     46          * Note(s)    : none
     47          ************************************************************************************************************************
     48          */
     49          
     50          void  App_OS_SetAllHooks (void)
     51          {
     52              CPU_SR_ALLOC();
     53          
     54          
     55              CPU_CRITICAL_ENTER();
     56              OS_AppTaskCreateHookPtr = App_OS_TaskCreateHook;
     57              OS_AppTaskDelHookPtr    = App_OS_TaskDelHook;
     58              OS_AppTaskReturnHookPtr = App_OS_TaskReturnHook;
     59          
     60              OS_AppIdleTaskHookPtr   = App_OS_IdleTaskHook;
     61              OS_AppStatTaskHookPtr   = App_OS_StatTaskHook;
     62              OS_AppTaskSwHookPtr     = App_OS_TaskSwHook;
     63              OS_AppTimeTickHookPtr   = App_OS_TimeTickHook;
     64              CPU_CRITICAL_EXIT();
     65          }
     66          
     67          /*$PAGE*/
     68          /*
     69          ************************************************************************************************************************
     70          *                                             CLEAR ALL APPLICATION HOOKS
     71          *
     72          * Description: Clear ALL application hooks.
     73          *
     74          * Arguments  : none.
     75          *
     76          * Note(s)    : none
     77          ************************************************************************************************************************
     78          */
     79          
     80          void  App_OS_ClrAllHooks (void)
     81          {
     82              CPU_SR_ALLOC();
     83          
     84          
     85              CPU_CRITICAL_ENTER();
     86              OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
     87              OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
     88              OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
     89          
     90              OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
     91              OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
     92              OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
     93              OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
     94              CPU_CRITICAL_EXIT();
     95          }
     96          
     97          /*$PAGE*/
     98          /*
     99          ************************************************************************************************************************
    100          *                                            APPLICATION TASK CREATION HOOK
    101          *
    102          * Description: This function is called when a task is created.
    103          *
    104          * Arguments  : p_tcb   is a pointer to the task control block of the task being created.
    105          *
    106          * Note(s)    : none
    107          ************************************************************************************************************************
    108          */
    109          
    110          void  App_OS_TaskCreateHook (OS_TCB  *p_tcb)
    111          {
    112          
    113          }
    114          
    115          /*$PAGE*/
    116          /*
    117          ************************************************************************************************************************
    118          *                                            APPLICATION TASK DELETION HOOK
    119          *
    120          * Description: This function is called when a task is deleted.
    121          *
    122          * Arguments  : p_tcb   is a pointer to the task control block of the task being deleted.
    123          *
    124          * Note(s)    : none
    125          ************************************************************************************************************************
    126          */
    127          
    128          void  App_OS_TaskDelHook (OS_TCB  *p_tcb)
    129          {
    130          
    131          }
    132          
    133          /*$PAGE*/
    134          /*
    135          ************************************************************************************************************************
    136          *                                             APPLICATION TASK RETURN HOOK
    137          *
    138          * Description: This function is called if a task accidentally returns.  In other words, a task should either be an
    139          *              infinite loop or delete itself when done.
    140          *
    141          * Arguments  : p_tcb     is a pointer to the OS_TCB of the task that is returning.
    142          *
    143          * Note(s)    : none
    144          ************************************************************************************************************************
    145          */
    146          
    147          void  App_OS_TaskReturnHook (OS_TCB  *p_tcb)
    148          {
    149          
    150          }
    151          
    152          /*$PAGE*/
    153          /*
    154          ************************************************************************************************************************
    155          *                                              APPLICATION IDLE TASK HOOK
    156          *
    157          * Description: This function is called by the idle task.  This hook has been added to allow you to do such things as
    158          *              STOP the CPU to conserve power.
    159          *
    160          * Arguments  : none
    161          *
    162          * Note(s)    : none
    163          ************************************************************************************************************************
    164          */
    165          
    166          void  App_OS_IdleTaskHook (void)
    167          {
    168          
    169          }
    170          
    171          /*$PAGE*/
    172          /*
    173          ************************************************************************************************************************
    174          *                                           APPLICATION STATISTIC TASK HOOK
    175          *
    176          * Description: This function is called every second by uC/OS-III's statistics task.  This allows your application to add
    177          *              functionality to the statistics task.
    178          *
    179          * Arguments  : none
    180          *
    181          * Note(s)    : none
    182          ************************************************************************************************************************
    183          */
    184          
    185          void  App_OS_StatTaskHook (void)
    186          {
    187          
    188          }
    189          
    190          /*$PAGE*/
    191          /*
    192          ************************************************************************************************************************
    193          *                                             APPLICATION TASK SWITCH HOOK
    194          *
    195          * Description: This function is called when a task switch is performed.  This allows you to perform other operations
    196          *              during a context switch.
    197          *
    198          * Arguments  : none
    199          *
    200          * Note(s)    : 1) Interrupts are disabled during this call.
    201          *              2) It is assumed that the global pointer 'OSTCBHighRdyPtr' points to the TCB of the task that will be
    202          *                 'switched in' (i.e. the highest priority task) and, 'OSTCBCurPtr' points to the task being switched out
    203          *                 (i.e. the preempted task).
    204          ************************************************************************************************************************
    205          */
    206          
    207          void  App_OS_TaskSwHook (void)
    208          {
    209          
    210          }
    211          
    212          /*$PAGE*/
    213          /*
    214          ************************************************************************************************************************
    215          *                                                APPLICATION TICK HOOK
    216          *
    217          * Description: This function is called every tick.
    218          *
    219          * Arguments  : none
    220          *
    221          * Note(s)    : 1) This function is assumed to be called from the Tick ISR.
    222          ************************************************************************************************************************
    223          */
    224          
    225          void  App_OS_TimeTickHook (void)
    226          {
    227          
    228          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   App_OS_ClrAllHooks
         8   -> CPU_IntDisMeasStart
         8   -> CPU_IntDisMeasStop
         0   -> CPU_SR_Restore
         8   -> CPU_SR_Save
       0   App_OS_IdleTaskHook
       8   App_OS_SetAllHooks
         8   -> CPU_IntDisMeasStart
         8   -> CPU_IntDisMeasStop
         0   -> CPU_SR_Restore
         8   -> CPU_SR_Save
       0   App_OS_StatTaskHook
       0   App_OS_TaskCreateHook
       0   App_OS_TaskDelHook
       0   App_OS_TaskReturnHook
       0   App_OS_TaskSwHook
       0   App_OS_TimeTickHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      56  App_OS_ClrAllHooks
       2  App_OS_IdleTaskHook
      82  App_OS_SetAllHooks
       2  App_OS_StatTaskHook
       2  App_OS_TaskCreateHook
       2  App_OS_TaskDelHook
       2  App_OS_TaskReturnHook
       2  App_OS_TaskSwHook
       2  App_OS_TimeTickHook

 
 180 bytes in section .text
 
 180 bytes of CODE memory

Errors: none
Warnings: none
