###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.7.9843/W32 for ARM        05/Feb/2018  13:40:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_cfg_app.c
#    Command line =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_cfg_app.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210B_EVAL -lcN
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List
#        -o
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\BSP\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-CPU\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-LIB\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uC-LIB\Ports\ARM-Cortex-M3\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uCOS-III\Source\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\OS\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\Utility\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart1\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart2\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\user_debug\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\dev_manage\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\modem\sim800\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\protocol_communication\protocol_jt808\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\rtc\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\gps\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\network_layer\nwl_uart3\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\modem\quecelMC20\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\rf\
#        -I
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\..\..\App\internal_flash\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List\os_cfg_app.lst
#    Object file  =  
#        D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj\os_cfg_app.o
#
###############################################################################

D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\BSP\os_cfg_app.c
      1          #if 1
      2          /*
      3          ************************************************************************************************************************
      4          *                                                      uC/OS-III
      5          *                                                 The Real-Time Kernel
      6          *
      7          *                                  (c) Copyright 2009-2011; Micrium, Inc.; Weston, FL
      8          *                           All rights reserved.  Protected by international copyright laws.
      9          *
     10          *                                       OS CONFIGURATION (APPLICATION SPECIFICS)
     11          *
     12          * File    : OS_CFG_APP.C
     13          * By      : JJL
     14          * Version : V3.02.00
     15          *
     16          * LICENSING TERMS:
     17          * ---------------
     18          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     19          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     20          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     21          *           application/product.   We provide ALL the source code for your convenience and to help you 
     22          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     23          *           it commercially without paying a licensing fee.
     24          *
     25          *           Knowledge of the source code may NOT be used to develop a similar product.
     26          *
     27          *           Please help us continue to provide the embedded community with the finest software available.
     28          *           Your honesty is greatly appreciated.
     29          *
     30          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     31          ************************************************************************************************************************
     32          * Note(s) : DO NOT CHANGE THIS FILE!
     33          ************************************************************************************************************************
     34          */
     35          
     36          #include <os_cfg_app.h>
     37          #include <os.h>
     38          
     39          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     40          const  CPU_CHAR  *os_cfg_app__c = "$Id: $";
     41          #endif
     42          
     43          
     44          //note: when add any task , assert below info to os_cfg_app.h file.
     45          OS_TCB  	DeviceManageTask_Tcb;
     46          #pragma data_alignment=8
     47          CPU_STK 	DeviceManageTask_Stk[DEVICE_MANAGE_TASK_STK_SIZE];
     48          
     49          OS_TCB  	Can0ManageTask_Tcb;
     50          //#pragma data_alignment=8
     51          CPU_STK 	Can0ManageTask_Stk[CAN0_MANAGE_TASK_STK_SIZE];
     52          
     53          OS_TCB  	GpsTask_Tcb;
     54          //#pragma data_alignment=8
     55          CPU_STK 	GpsTask_Stk[GPS_TASK_STK_SIZE];
     56          
     57          OS_TCB  	ISO15765Task_Tcb;
     58          //#pragma data_alignment=8
     59          CPU_STK 	ISO15765Task_Stk[ISO15765_TASK_STK_SIZE];
     60          
     61          OS_TCB  	ModemManageTask_Tcb;
     62          //#pragma data_alignment=8
     63          CPU_STK 	ModemManageTask_Stk[MODEM_MANAGE_TASK_STK_SIZE];
     64          
     65          OS_TCB  	modem_receive_task_Tcb;
     66          //#pragma data_alignment=8
     67          CPU_STK 	modem_receive_task_Stk[MODEM_RECEIV_TASK_STK_SIZE];
     68          
     69          OS_TCB  	telecom_prot_manage_task_Tcb;
     70          //#pragma data_alignment=8
     71          CPU_STK 	telecom_prot_manage_task_stk[TELECOM_PROT_MANAGE_TASK_STK_SIZE];
     72          
     73          OS_TCB  	period_report_save_task_Tcb;
     74          //#pragma data_alignment=8
     75          CPU_STK 	period_rep_save_task_stk[PERIOD_REP_SAVE_TASK_STK_SIZE];
     76          
     77          OS_TCB  	remote_report_task_Tcb;
     78          //#pragma data_alignment=8
     79          CPU_STK 	remote_report_task_stk[REMOTE_REPORT_TASK_STK_SIZE];
     80          
     81          OS_TCB  	remote_receive_task_Tcb;
     82          //#pragma data_alignment=8
     83          CPU_STK 	remote_receive_task_stk[REMOTE_RECEIVE_TASK_STK_SIZE];
     84          
     85          OS_TCB  	storage_task_Tcb;
     86          //#pragma data_alignment=8
     87          CPU_STK 	storage_task_stk[STORAGE_TASK_STK_SIZE];
     88          
     89          OS_TCB  	rf_task_Tcb;
     90          //#pragma data_alignment=8
     91          CPU_STK 	rf_task_stk[RF_TASK_STK_SIZE];
     92          
     93          // msg
     94          OS_Q ISO15765_RX_CAN_MSG_Q;
     95          OS_Q ISO15765_RX_APP_DATA_Q;
     96          
     97          
     98          
     99          
    100          
    101          
    102          
    103          
    104          
    105          
    106          
    107          
    108          
    109          
    110          
    111          
    112          
    113          
    114          
    115          
    116          
    117          
    118          
    119          
    120          #define  OS_CFG_IDLE_TASK_STK_LIMIT      ((OS_CFG_IDLE_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    121          #define  OS_CFG_INT_Q_TASK_STK_LIMIT     ((OS_CFG_INT_Q_TASK_STK_SIZE * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    122          #define  OS_CFG_STAT_TASK_STK_LIMIT      ((OS_CFG_STAT_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    123          #define  OS_CFG_TICK_TASK_STK_LIMIT      ((OS_CFG_TICK_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    124          #define  OS_CFG_TMR_TASK_STK_LIMIT       ((OS_CFG_TMR_TASK_STK_SIZE   * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    125          
    126          /*
    127          ************************************************************************************************************************
    128          *                                                    DATA STORAGE
    129          ************************************************************************************************************************
    130          */
    131          
    132          CPU_STK        OSCfg_IdleTaskStk   [OS_CFG_IDLE_TASK_STK_SIZE];
    133          
    134          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    135          OS_INT_Q       OSCfg_IntQ          [OS_CFG_INT_Q_SIZE];
    136          CPU_STK        OSCfg_IntQTaskStk   [OS_CFG_INT_Q_TASK_STK_SIZE];
    137          #endif
    138          
    139          #if (OS_CFG_ISR_STK_SIZE > 0u)
    140          CPU_STK        OSCfg_ISRStk        [OS_CFG_ISR_STK_SIZE];
    141          #endif
    142          
    143          #if (OS_MSG_EN > 0u)
    144          OS_MSG         OSCfg_MsgPool       [OS_CFG_MSG_POOL_SIZE];
    145          #endif
    146          
    147          #if (OS_CFG_STAT_TASK_EN > 0u)
    148          CPU_STK        OSCfg_StatTaskStk   [OS_CFG_STAT_TASK_STK_SIZE];
    149          #endif
    150          
    151          CPU_STK        OSCfg_TickTaskStk   [OS_CFG_TICK_TASK_STK_SIZE];
    152          OS_TICK_SPOKE  OSCfg_TickWheel     [OS_CFG_TICK_WHEEL_SIZE];
    153          
    154          #if (OS_CFG_TMR_EN > 0u)
    155          CPU_STK        OSCfg_TmrTaskStk    [OS_CFG_TMR_TASK_STK_SIZE];
    156          OS_TMR_SPOKE   OSCfg_TmrWheel      [OS_CFG_TMR_WHEEL_SIZE];
    157          #endif
    158          
    159          
    160          /*$PAGE*/
    161          /*
    162          ************************************************************************************************************************
    163          *                                                      CONSTANTS
    164          ************************************************************************************************************************
    165          */
    166          
    167          CPU_STK      * const  OSCfg_IdleTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IdleTaskStk[0];
    168          CPU_STK_SIZE   const  OSCfg_IdleTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_LIMIT;
    169          CPU_STK_SIZE   const  OSCfg_IdleTaskStkSize      = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_SIZE;
    170          CPU_INT32U     const  OSCfg_IdleTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IdleTaskStk);
    171          
    172          
    173          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    174          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)&OSCfg_IntQ[0];
    175          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )OS_CFG_INT_Q_SIZE;
    176          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )sizeof(OSCfg_IntQ);
    177          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IntQTaskStk[0];
    178          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_LIMIT;
    179          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_SIZE;
    180          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IntQTaskStk);
    181          #else
    182          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)0;
    183          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )0;
    184          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )0;
    185          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)0;
    186          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)0;
    187          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)0;
    188          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )0;
    189          #endif
    190          
    191          
    192          #if (OS_CFG_ISR_STK_SIZE > 0u)
    193          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)&OSCfg_ISRStk[0];
    194          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)OS_CFG_ISR_STK_SIZE;
    195          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )sizeof(OSCfg_ISRStk);
    196          #else
    197          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)0;
    198          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)0;
    199          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )0;
    200          #endif
    201          
    202          
    203          #if (OS_MSG_EN > 0u)
    204          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)OS_CFG_MSG_POOL_SIZE;
    205          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )sizeof(OSCfg_MsgPool);
    206          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)&OSCfg_MsgPool[0];
    207          #else
    208          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)0;
    209          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )0;
    210          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)0;
    211          #endif
    212          
    213          
    214          #if (OS_CFG_STAT_TASK_EN > 0u)
    215          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )OS_CFG_STAT_TASK_PRIO;
    216          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )OS_CFG_STAT_TASK_RATE_HZ;
    217          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)&OSCfg_StatTaskStk[0];
    218          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_LIMIT;
    219          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_SIZE;
    220          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_StatTaskStk);
    221          #else
    222          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )0;
    223          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )0;
    224          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)0;
    225          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)0;
    226          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)0;
    227          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )0;
    228          #endif
    229          
    230          
    231          CPU_STK_SIZE   const  OSCfg_StkSizeMin           = (CPU_STK_SIZE)OS_CFG_STK_SIZE_MIN;
    232          
    233          
    234          OS_RATE_HZ     const  OSCfg_TickRate_Hz          = (OS_RATE_HZ  )OS_CFG_TICK_RATE_HZ;
    235          OS_PRIO        const  OSCfg_TickTaskPrio         = (OS_PRIO     )OS_CFG_TICK_TASK_PRIO;
    236          CPU_STK      * const  OSCfg_TickTaskStkBasePtr   = (CPU_STK    *)&OSCfg_TickTaskStk[0];
    237          CPU_STK_SIZE   const  OSCfg_TickTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_LIMIT;
    238          CPU_STK_SIZE   const  OSCfg_TickTaskStkSize      = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_SIZE;
    239          CPU_INT32U     const  OSCfg_TickTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_TickTaskStk);
    240          OS_OBJ_QTY     const  OSCfg_TickWheelSize        = (OS_OBJ_QTY  )OS_CFG_TICK_WHEEL_SIZE;
    241          CPU_INT32U     const  OSCfg_TickWheelSizeRAM     = (CPU_INT32U  )sizeof(OSCfg_TickWheel);
    242          
    243          
    244          #if (OS_CFG_TMR_EN > 0u)
    245          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )OS_CFG_TMR_TASK_PRIO;
    246          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )OS_CFG_TMR_TASK_RATE_HZ;
    247          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)&OSCfg_TmrTaskStk[0];
    248          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_LIMIT;
    249          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_SIZE;
    250          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )sizeof(OSCfg_TmrTaskStk);
    251          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )OS_CFG_TMR_WHEEL_SIZE;
    252          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )sizeof(OSCfg_TmrWheel);
    253          #else
    254          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )0;
    255          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )0;
    256          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)0;
    257          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)0;
    258          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)0;
    259          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )0;
    260          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )0;
    261          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )0;
    262          #endif
    263          
    264          
    265          /*$PAGE*/
    266          /*
    267          ************************************************************************************************************************
    268          *                                         TOTAL SIZE OF APPLICATION CONFIGURATION
    269          ************************************************************************************************************************
    270          */
    271          
    272          CPU_INT32U     const  OSCfg_DataSizeRAM          = sizeof(OSCfg_IdleTaskStk)
    273          
    274          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    275                                                           + sizeof(OSCfg_IntQ)
    276                                                           + sizeof(OSCfg_IntQTaskStk)
    277          #endif
    278          
    279          #if (OS_MSG_EN > 0u)
    280                                                           + sizeof(OSCfg_MsgPool)
    281          #endif
    282          
    283          #if (OS_CFG_STAT_TASK_EN > 0u)
    284                                                           + sizeof(OSCfg_StatTaskStk)
    285          #endif
    286          
    287          #if (OS_CFG_TMR_EN > 0u)
    288                                                           + sizeof(OSCfg_TmrTaskStk)
    289                                                           + sizeof(OSCfg_TmrWheel)
    290          #endif
    291          
    292          #if (OS_CFG_ISR_STK_SIZE > 0u)
    293                                                           + sizeof(OSCfg_ISRStk)
    294          #endif
    295                                                           + sizeof(OSCfg_TickTaskStk)
    296                                                           + sizeof(OSCfg_TickWheel);
    297          
    298          /*$PAGE*/
    299          /*
    300          ************************************************************************************************************************
    301          *                                             OS CONFIGURATION INITIALIZATION
    302          *
    303          * Description: This function is used to make sure that debug variables that are unused in the application are not
    304          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    305          *              DELETE the code in this function while still leaving the declaration of the function itself.
    306          *
    307          * Arguments  : none
    308          *
    309          * Returns    : none
    310          *
    311          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    312          *                  variables which are declared in this file.
    313          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    314          *                  DOES NOT optimize out the 'const' variables above.
    315          ************************************************************************************************************************
    316          */
    317          
    318          void  OSCfg_Init (void)
    319          {
    320              void const *p_temp;
    321          
    322          
    323              p_temp = (void const *)&OSCfg_DataSizeRAM;
    324          
    325              p_temp = (void const *)&OSCfg_IdleTaskStkBasePtr;
    326              p_temp = (void const *)&OSCfg_IdleTaskStkLimit;
    327              p_temp = (void const *)&OSCfg_IdleTaskStkSize;
    328              p_temp = (void const *)&OSCfg_IdleTaskStkSizeRAM;
    329          
    330          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    331              p_temp = (void const *)&OSCfg_IntQBasePtr;
    332              p_temp = (void const *)&OSCfg_IntQSize;
    333              p_temp = (void const *)&OSCfg_IntQSizeRAM;
    334              p_temp = (void const *)&OSCfg_IntQTaskStkBasePtr;
    335              p_temp = (void const *)&OSCfg_IntQTaskStkLimit;
    336              p_temp = (void const *)&OSCfg_IntQTaskStkSize;
    337              p_temp = (void const *)&OSCfg_IntQTaskStkSizeRAM;
    338          #endif
    339          
    340              p_temp = (void const *)&OSCfg_ISRStkBasePtr;
    341              p_temp = (void const *)&OSCfg_ISRStkSize;
    342              p_temp = (void const *)&OSCfg_ISRStkSizeRAM;
    343          
    344          #if (OS_MSG_EN > 0u)
    345              p_temp = (void const *)&OSCfg_MsgPoolSize;
    346              p_temp = (void const *)&OSCfg_MsgPoolSizeRAM;
    347              p_temp = (void const *)&OSCfg_MsgPoolBasePtr;
    348          #endif
    349          
    350          #if (OS_CFG_STAT_TASK_EN > 0u)
    351              p_temp = (void const *)&OSCfg_StatTaskPrio;
    352              p_temp = (void const *)&OSCfg_StatTaskRate_Hz;
    353              p_temp = (void const *)&OSCfg_StatTaskStkBasePtr;
    354              p_temp = (void const *)&OSCfg_StatTaskStkLimit;
    355              p_temp = (void const *)&OSCfg_StatTaskStkSize;
    356              p_temp = (void const *)&OSCfg_StatTaskStkSizeRAM;
    357          #endif
    358          
    359              p_temp = (void const *)&OSCfg_StkSizeMin;
    360          
    361              p_temp = (void const *)&OSCfg_TickRate_Hz;
    362              p_temp = (void const *)&OSCfg_TickTaskPrio;
    363              p_temp = (void const *)&OSCfg_TickTaskStkBasePtr;
    364              p_temp = (void const *)&OSCfg_TickTaskStkLimit;
    365              p_temp = (void const *)&OSCfg_TickTaskStkSize;
    366              p_temp = (void const *)&OSCfg_TickTaskStkSizeRAM;
    367              p_temp = (void const *)&OSCfg_TickWheelSize;
    368              p_temp = (void const *)&OSCfg_TickWheelSizeRAM;
    369          
    370          #if (OS_CFG_TMR_EN > 0u)
    371              p_temp = (void const *)&OSCfg_TmrTaskPrio;
    372              p_temp = (void const *)&OSCfg_TmrTaskRate_Hz;
    373              p_temp = (void const *)&OSCfg_TmrTaskStkBasePtr;
    374              p_temp = (void const *)&OSCfg_TmrTaskStkLimit;
    375              p_temp = (void const *)&OSCfg_TmrTaskStkSize;
    376              p_temp = (void const *)&OSCfg_TmrTaskStkSizeRAM;
    377              p_temp = (void const *)&OSCfg_TmrWheelSize;
    378              p_temp = (void const *)&OSCfg_TmrWheelSizeRAM;
    379          #endif
    380              p_temp = p_temp;
    381          }
    382          
    383          #else
    384          /*
    385          ************************************************************************************************************************
    386          *                                                      uC/OS-III
    387          *                                                 The Real-Time Kernel
    388          *
    389          *                                  (c) Copyright 2009-2011; Micrium, Inc.; Weston, FL
    390          *                           All rights reserved.  Protected by international copyright laws.
    391          *
    392          *                                       OS CONFIGURATION (APPLICATION SPECIFICS)
    393          *
    394          * File    : OS_CFG_APP.C
    395          * By      : JJL
    396          * Version : V3.02.00
    397          *
    398          * LICENSING TERMS:
    399          * ---------------
    400          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
    401          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
    402          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
    403          *           application/product.   We provide ALL the source code for your convenience and to help you 
    404          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
    405          *           it commercially without paying a licensing fee.
    406          *
    407          *           Knowledge of the source code may NOT be used to develop a similar product.
    408          *
    409          *           Please help us continue to provide the embedded community with the finest software available.
    410          *           Your honesty is greatly appreciated.
    411          *
    412          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
    413          ************************************************************************************************************************
    414          * Note(s) : DO NOT CHANGE THIS FILE!
    415          ************************************************************************************************************************
    416          */
    417          
    418          #include <os_cfg_app.h>
    419          #include <os.h>
    420          
    421          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
    422          const  CPU_CHAR  *os_cfg_app__c = "$Id: $";
    423          #endif
    424          
    425          
    426          #define _____USER_DEFINE__________________________________
    427          
    428          OS_TCB  	DeviceManageTask_Tcb;
    429          #pragma data_alignment=8
    430          CPU_STK 	DeviceManageTask_Stk[DEVICE_MANAGE_TASK_STK_SIZE];
    431          
    432          OS_TCB  	Can0ManageTask_Tcb;
    433          #pragma data_alignment=8
    434          CPU_STK 	Can0ManageTask_Stk[CAN0_MANAGE_TASK_STK_SIZE];
    435          
    436          //OS_TCB  	ModemManageTask_Tcb;
    437          //#pragma data_alignment=8
    438          //CPU_STK 	ModemManageTask_Stk[MODEM_MANAGE_TASK_STK_SIZE];
    439          
    440          //OS_TCB  	GpsTask_Tcb;
    441          //#pragma data_alignment=8
    442          //CPU_STK 	GpsTask_Stk[GPS_TASK_STK_SIZE];
    443          
    444          OS_TCB  	SensorTask_Tcb;
    445          
    446          
    447          
    448          
    449          
    450          
    451          #define  OS_CFG_IDLE_TASK_STK_LIMIT      ((OS_CFG_IDLE_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    452          #define  OS_CFG_INT_Q_TASK_STK_LIMIT     ((OS_CFG_INT_Q_TASK_STK_SIZE * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    453          #define  OS_CFG_STAT_TASK_STK_LIMIT      ((OS_CFG_STAT_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    454          #define  OS_CFG_TICK_TASK_STK_LIMIT      ((OS_CFG_TICK_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    455          #define  OS_CFG_TMR_TASK_STK_LIMIT       ((OS_CFG_TMR_TASK_STK_SIZE   * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
    456          
    457          /*
    458          ************************************************************************************************************************
    459          *                                                    DATA STORAGE
    460          ************************************************************************************************************************
    461          */
    462          
    463          CPU_STK        OSCfg_IdleTaskStk   [OS_CFG_IDLE_TASK_STK_SIZE];
    464          
    465          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    466          OS_INT_Q       OSCfg_IntQ          [OS_CFG_INT_Q_SIZE];
    467          CPU_STK        OSCfg_IntQTaskStk   [OS_CFG_INT_Q_TASK_STK_SIZE];
    468          #endif
    469          
    470          #if (OS_CFG_ISR_STK_SIZE > 0u)
    471          CPU_STK        OSCfg_ISRStk        [OS_CFG_ISR_STK_SIZE];
    472          #endif
    473          
    474          #if (OS_MSG_EN > 0u)
    475          OS_MSG         OSCfg_MsgPool       [OS_CFG_MSG_POOL_SIZE];
    476          #endif
    477          
    478          #if (OS_CFG_STAT_TASK_EN > 0u)
    479          CPU_STK        OSCfg_StatTaskStk   [OS_CFG_STAT_TASK_STK_SIZE];
    480          #endif
    481          
    482          CPU_STK        OSCfg_TickTaskStk   [OS_CFG_TICK_TASK_STK_SIZE];
    483          OS_TICK_SPOKE  OSCfg_TickWheel     [OS_CFG_TICK_WHEEL_SIZE];
    484          
    485          #if (OS_CFG_TMR_EN > 0u)
    486          CPU_STK        OSCfg_TmrTaskStk    [OS_CFG_TMR_TASK_STK_SIZE];
    487          OS_TMR_SPOKE   OSCfg_TmrWheel      [OS_CFG_TMR_WHEEL_SIZE];
    488          #endif
    489          
    490          /*$PAGE*/
    491          /*
    492          ************************************************************************************************************************
    493          *                                                      CONSTANTS
    494          ************************************************************************************************************************
    495          */
    496          
    497          CPU_STK      * const  OSCfg_IdleTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IdleTaskStk[0];
    498          CPU_STK_SIZE   const  OSCfg_IdleTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_LIMIT;
    499          CPU_STK_SIZE   const  OSCfg_IdleTaskStkSize      = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_SIZE;
    500          CPU_INT32U     const  OSCfg_IdleTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IdleTaskStk);
    501          
    502          
    503          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    504          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)&OSCfg_IntQ[0];
    505          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )OS_CFG_INT_Q_SIZE;
    506          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )sizeof(OSCfg_IntQ);
    507          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IntQTaskStk[0];
    508          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_LIMIT;
    509          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_SIZE;
    510          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IntQTaskStk);
    511          #else
    512          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)0;
    513          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )0;
    514          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )0;
    515          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)0;
    516          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)0;
    517          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)0;
    518          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )0;
    519          #endif
    520          
    521          
    522          #if (OS_CFG_ISR_STK_SIZE > 0u)
    523          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)&OSCfg_ISRStk[0];
    524          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)OS_CFG_ISR_STK_SIZE;
    525          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )sizeof(OSCfg_ISRStk);
    526          #else
    527          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)0;
    528          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)0;
    529          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )0;
    530          #endif
    531          
    532          
    533          #if (OS_MSG_EN > 0u)
    534          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)OS_CFG_MSG_POOL_SIZE;
    535          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )sizeof(OSCfg_MsgPool);
    536          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)&OSCfg_MsgPool[0];
    537          #else
    538          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)0;
    539          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )0;
    540          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)0;
    541          #endif
    542          
    543          
    544          #if (OS_CFG_STAT_TASK_EN > 0u)
    545          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )OS_CFG_STAT_TASK_PRIO;
    546          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )OS_CFG_STAT_TASK_RATE_HZ;
    547          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)&OSCfg_StatTaskStk[0];
    548          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_LIMIT;
    549          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_SIZE;
    550          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_StatTaskStk);
    551          #else
    552          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )0;
    553          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )0;
    554          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)0;
    555          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)0;
    556          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)0;
    557          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )0;
    558          #endif
    559          
    560          
    561          CPU_STK_SIZE   const  OSCfg_StkSizeMin           = (CPU_STK_SIZE)OS_CFG_STK_SIZE_MIN;
    562          
    563          
    564          OS_RATE_HZ     const  OSCfg_TickRate_Hz          = (OS_RATE_HZ  )OS_CFG_TICK_RATE_HZ;
    565          OS_PRIO        const  OSCfg_TickTaskPrio         = (OS_PRIO     )OS_CFG_TICK_TASK_PRIO;
    566          CPU_STK      * const  OSCfg_TickTaskStkBasePtr   = (CPU_STK    *)&OSCfg_TickTaskStk[0];
    567          CPU_STK_SIZE   const  OSCfg_TickTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_LIMIT;
    568          CPU_STK_SIZE   const  OSCfg_TickTaskStkSize      = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_SIZE;
    569          CPU_INT32U     const  OSCfg_TickTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_TickTaskStk);
    570          OS_OBJ_QTY     const  OSCfg_TickWheelSize        = (OS_OBJ_QTY  )OS_CFG_TICK_WHEEL_SIZE;
    571          CPU_INT32U     const  OSCfg_TickWheelSizeRAM     = (CPU_INT32U  )sizeof(OSCfg_TickWheel);
    572          
    573          
    574          #if (OS_CFG_TMR_EN > 0u)
    575          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )OS_CFG_TMR_TASK_PRIO;
    576          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )OS_CFG_TMR_TASK_RATE_HZ;
    577          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)&OSCfg_TmrTaskStk[0];
    578          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_LIMIT;
    579          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_SIZE;
    580          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )sizeof(OSCfg_TmrTaskStk);
    581          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )OS_CFG_TMR_WHEEL_SIZE;
    582          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )sizeof(OSCfg_TmrWheel);
    583          #else
    584          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )0;
    585          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )0;
    586          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)0;
    587          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)0;
    588          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)0;
    589          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )0;
    590          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )0;
    591          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )0;
    592          #endif
    593          
    594          
    595          /*$PAGE*/
    596          /*
    597          ************************************************************************************************************************
    598          *                                         TOTAL SIZE OF APPLICATION CONFIGURATION
    599          ************************************************************************************************************************
    600          */
    601          
    602          CPU_INT32U     const  OSCfg_DataSizeRAM          = sizeof(OSCfg_IdleTaskStk)
    603          
    604          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    605                                                           + sizeof(OSCfg_IntQ)
    606                                                           + sizeof(OSCfg_IntQTaskStk)
    607          #endif
    608          
    609          #if (OS_MSG_EN > 0u)
    610                                                           + sizeof(OSCfg_MsgPool)
    611          #endif
    612          
    613          #if (OS_CFG_STAT_TASK_EN > 0u)
    614                                                           + sizeof(OSCfg_StatTaskStk)
    615          #endif
    616          
    617          #if (OS_CFG_TMR_EN > 0u)
    618                                                           + sizeof(OSCfg_TmrTaskStk)
    619                                                           + sizeof(OSCfg_TmrWheel)
    620          #endif
    621          
    622          #if (OS_CFG_ISR_STK_SIZE > 0u)
    623                                                           + sizeof(OSCfg_ISRStk)
    624          #endif
    625                                                           + sizeof(OSCfg_TickTaskStk)
    626                                                           + sizeof(OSCfg_TickWheel);
    627          
    628          /*$PAGE*/
    629          /*
    630          ************************************************************************************************************************
    631          *                                             OS CONFIGURATION INITIALIZATION
    632          *
    633          * Description: This function is used to make sure that debug variables that are unused in the application are not
    634          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    635          *              DELETE the code in this function while still leaving the declaration of the function itself.
    636          *
    637          * Arguments  : none
    638          *
    639          * Returns    : none
    640          *
    641          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    642          *                  variables which are declared in this file.
    643          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    644          *                  DOES NOT optimize out the 'const' variables above.
    645          ************************************************************************************************************************
    646          */
    647          
    648          void  OSCfg_Init (void)
    649          {
    650              void const *p_temp;
    651          
    652          
    653              p_temp = (void const *)&OSCfg_DataSizeRAM;
    654          
    655              p_temp = (void const *)&OSCfg_IdleTaskStkBasePtr;
    656              p_temp = (void const *)&OSCfg_IdleTaskStkLimit;
    657              p_temp = (void const *)&OSCfg_IdleTaskStkSize;
    658              p_temp = (void const *)&OSCfg_IdleTaskStkSizeRAM;
    659          
    660          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    661              p_temp = (void const *)&OSCfg_IntQBasePtr;
    662              p_temp = (void const *)&OSCfg_IntQSize;
    663              p_temp = (void const *)&OSCfg_IntQSizeRAM;
    664              p_temp = (void const *)&OSCfg_IntQTaskStkBasePtr;
    665              p_temp = (void const *)&OSCfg_IntQTaskStkLimit;
    666              p_temp = (void const *)&OSCfg_IntQTaskStkSize;
    667              p_temp = (void const *)&OSCfg_IntQTaskStkSizeRAM;
    668          #endif
    669          
    670              p_temp = (void const *)&OSCfg_ISRStkBasePtr;
    671              p_temp = (void const *)&OSCfg_ISRStkSize;
    672              p_temp = (void const *)&OSCfg_ISRStkSizeRAM;
    673          
    674          #if (OS_MSG_EN > 0u)
    675              p_temp = (void const *)&OSCfg_MsgPoolSize;
    676              p_temp = (void const *)&OSCfg_MsgPoolSizeRAM;
    677              p_temp = (void const *)&OSCfg_MsgPoolBasePtr;
    678          #endif
    679          
    680          #if (OS_CFG_STAT_TASK_EN > 0u)
    681              p_temp = (void const *)&OSCfg_StatTaskPrio;
    682              p_temp = (void const *)&OSCfg_StatTaskRate_Hz;
    683              p_temp = (void const *)&OSCfg_StatTaskStkBasePtr;
    684              p_temp = (void const *)&OSCfg_StatTaskStkLimit;
    685              p_temp = (void const *)&OSCfg_StatTaskStkSize;
    686              p_temp = (void const *)&OSCfg_StatTaskStkSizeRAM;
    687          #endif
    688          
    689              p_temp = (void const *)&OSCfg_StkSizeMin;
    690          
    691              p_temp = (void const *)&OSCfg_TickRate_Hz;
    692              p_temp = (void const *)&OSCfg_TickTaskPrio;
    693              p_temp = (void const *)&OSCfg_TickTaskStkBasePtr;
    694              p_temp = (void const *)&OSCfg_TickTaskStkLimit;
    695              p_temp = (void const *)&OSCfg_TickTaskStkSize;
    696              p_temp = (void const *)&OSCfg_TickTaskStkSizeRAM;
    697              p_temp = (void const *)&OSCfg_TickWheelSize;
    698              p_temp = (void const *)&OSCfg_TickWheelSizeRAM;
    699          
    700          #if (OS_CFG_TMR_EN > 0u)
    701              p_temp = (void const *)&OSCfg_TmrTaskPrio;
    702              p_temp = (void const *)&OSCfg_TmrTaskRate_Hz;
    703              p_temp = (void const *)&OSCfg_TmrTaskStkBasePtr;
    704              p_temp = (void const *)&OSCfg_TmrTaskStkLimit;
    705              p_temp = (void const *)&OSCfg_TmrTaskStkSize;
    706              p_temp = (void const *)&OSCfg_TmrTaskStkSizeRAM;
    707              p_temp = (void const *)&OSCfg_TmrWheelSize;
    708              p_temp = (void const *)&OSCfg_TmrWheelSizeRAM;
    709          #endif
    710              p_temp = p_temp;
    711          }
    712          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSCfg_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     256  Can0ManageTask_Stk
     208  Can0ManageTask_Tcb
     512  DeviceManageTask_Stk
     208  DeviceManageTask_Tcb
    1024  GpsTask_Stk
     208  GpsTask_Tcb
     512  ISO15765Task_Stk
     208  ISO15765Task_Tcb
      48  ISO15765_RX_APP_DATA_Q
      48  ISO15765_RX_CAN_MSG_Q
     512  ModemManageTask_Stk
     208  ModemManageTask_Tcb
       4  OSCfg_DataSizeRAM
     512  OSCfg_ISRStk
       4  OSCfg_ISRStkBasePtr
       4  OSCfg_ISRStkSize
       4  OSCfg_ISRStkSizeRAM
     512  OSCfg_IdleTaskStk
       4  OSCfg_IdleTaskStkBasePtr
       4  OSCfg_IdleTaskStkLimit
       4  OSCfg_IdleTaskStkSize
       4  OSCfg_IdleTaskStkSizeRAM
       2  OSCfg_Init
       4  OSCfg_IntQBasePtr
       2  OSCfg_IntQSize
       4  OSCfg_IntQSizeRAM
       4  OSCfg_IntQTaskStkBasePtr
       4  OSCfg_IntQTaskStkLimit
       4  OSCfg_IntQTaskStkSize
       4  OSCfg_IntQTaskStkSizeRAM
    1600  OSCfg_MsgPool
       4  OSCfg_MsgPoolBasePtr
       2  OSCfg_MsgPoolSize
       4  OSCfg_MsgPoolSizeRAM
       1  OSCfg_StatTaskPrio
       4  OSCfg_StatTaskRate_Hz
       4  OSCfg_StatTaskStkBasePtr
       4  OSCfg_StatTaskStkLimit
       4  OSCfg_StatTaskStkSize
       4  OSCfg_StatTaskStkSizeRAM
       4  OSCfg_StkSizeMin
       4  OSCfg_TickRate_Hz
       1  OSCfg_TickTaskPrio
     512  OSCfg_TickTaskStk
       4  OSCfg_TickTaskStkBasePtr
       4  OSCfg_TickTaskStkLimit
       4  OSCfg_TickTaskStkSize
       4  OSCfg_TickTaskStkSizeRAM
     136  OSCfg_TickWheel
       2  OSCfg_TickWheelSize
       4  OSCfg_TickWheelSizeRAM
       1  OSCfg_TmrTaskPrio
       4  OSCfg_TmrTaskRate_Hz
     768  OSCfg_TmrTaskStk
       4  OSCfg_TmrTaskStkBasePtr
       4  OSCfg_TmrTaskStkLimit
       4  OSCfg_TmrTaskStkSize
       4  OSCfg_TmrTaskStkSizeRAM
     136  OSCfg_TmrWheel
       2  OSCfg_TmrWheelSize
       4  OSCfg_TmrWheelSizeRAM
     512  modem_receive_task_Stk
     208  modem_receive_task_Tcb
     256  period_rep_save_task_stk
     208  period_report_save_task_Tcb
     208  remote_receive_task_Tcb
     512  remote_receive_task_stk
     208  remote_report_task_Tcb
     512  remote_report_task_stk
     208  rf_task_Tcb
     256  rf_task_stk
     208  storage_task_Tcb
     256  storage_task_stk
     208  telecom_prot_manage_task_Tcb
     512  telecom_prot_manage_task_stk

 
 12 400 bytes in section .bss
    147 bytes in section .rodata
      2 bytes in section .text
 
      2 bytes of CODE  memory
    147 bytes of CONST memory
 12 400 bytes of DATA  memory

Errors: none
Warnings: none
