###############################################################################
#                                                                             #
#     IAR Assembler V7.40.7.9843/W32 for ARM 05/Feb/2018  13:40:51            #
#     Copyright 1999-2015 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\uC-CPU\ARM-Cortex-M3\IAR\cpu_a.asm#
#           List file     =  D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List\cpu_a.lst#
#           Object file   =  D:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj\cpu_a.o#
#           Command line  =  D:\GitHub2\smart_box_q5\SMART_CARD\Project\OS\uC-CPU\ARM-Cortex-M3\IAR\cpu_a.asm #
#                            -OD:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\Obj #
#                            -s+ -M<> -w+ -r                                  #
#                            -LD:\GitHub2\smart_box_q5\SMART_CARD\Project\STM32F10x_StdPeriph_Template\EWARM\STM3210B-EVAL\List #
#                            -t8 --cpu Cortex-M3 --fpu None                   #
#                                                                             #
###############################################################################

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                   uC/CPU
    3                           ;                                    CPU
                                 CONFIGURATION & PORT LAYER
    4                           ;
    5                           ;                          (c) Copyright
                                 2004-2011; Micrium, Inc.; Weston, FL
    6                           ;
    7                           ;               All rights reserved. 
                                 Protected by international copyright
                                 laws.
    8                           ;
    9                           ;               uC/CPU is provided in source
                                 form to registered licensees ONLY.  It is
                                 
   10                           ;               illegal to distribute this
                                 source code to any third party unless you
                                 receive 
   11                           ;               written permission by an
                                 authorized Micrium representative.  Knowledge
                                 of 
   12                           ;               the source code may NOT be
                                 used to develop a similar product.
   13                           ;
   14                           ;               Please help us continue to
                                 provide the Embedded community with the finest
                                 
   15                           ;               software available.  Your
                                 honesty is greatly appreciated.
   16                           ;
   17                           ;               You can contact us at
                                 www.micrium.com.
   18                           ;*********************************************
                                ***********************************************
                                ************
   19                           
   20                           ;*********************************************
                                ***********************************************
                                ************
   21                           ;
   22                           ;                                           
                                 CPU PORT FILE
   23                           ;
   24                           ;                                           
                                 ARM-Cortex-M3
   25                           ;                                           
                                 IAR C Compiler
   26                           ;
   27                           ; Filename      : cpu_a.asm
   28                           ; Version       : V1.28.01.00
   29                           ; Programmer(s) : JJL
   30                           ;*********************************************
                                ***********************************************
                                ************
   31                           
   32                           
   33                           ;*********************************************
                                ***********************************************
                                ************
   34                           ;                                          
                                 PUBLIC FUNCTIONS
   35                           ;*********************************************
                                ***********************************************
                                ************
   36                           
   37                                   PUBLIC  CPU_IntDis
   38                                   PUBLIC  CPU_IntEn
   39                           
   40                                   PUBLIC  CPU_SR_Save
   41                                   PUBLIC  CPU_SR_Restore
   42                           
   43                                   PUBLIC  CPU_CntLeadZeros
   44                                   PUBLIC  CPU_RevBits
   45                           
   46                                   PUBLIC  CPU_WaitForInt
   47                                   PUBLIC  CPU_WaitForExcept
   48                           
   49                           
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           ;                                      CODE
                                 GENERATION DIRECTIVES
   52                           ;*********************************************
                                ***********************************************
                                ************
   53                           
   54                                   RSEG CODE:CODE:NOROOT(2)
   55                                   THUMB
   56                           
   57                           ;$PAGE
   58                           ;*********************************************
                                ***********************************************
                                ************
   59                           ;                                    DISABLE
                                 and ENABLE INTERRUPTS
   60                           ;
   61                           ; Description: Disable/Enable interrupts.
   62                           ;
   63                           ; Prototypes : void  CPU_IntDis(void);
   64                           ;              void  CPU_IntEn (void);
   65                           ;*********************************************
                                ***********************************************
                                ************
   66                           
   67                           CPU_IntDis
   68    00000000 72B6                  CPSID   I
   69    00000002 7047                  BX      LR
   70                           
   71                           
   72                           CPU_IntEn
   73    00000004 62B6                  CPSIE   I
   74    00000006 7047                  BX      LR
   75                           
   76                           
   77                           ;*********************************************
                                ***********************************************
                                ************
   78                           ;                                     
                                 CRITICAL SECTION FUNCTIONS
   79                           ;
   80                           ; Description : Disable/Enable interrupts by
                                 preserving the state of interrupts.  Generally
                                 speaking, the
   81                           ;               state of the interrupt disable
                                 flag is stored in the local variable 'cpu_sr'
                                 & interrupts
   82                           ;               are then disabled ('cpu_sr' is
                                 allocated in all functions that need to
                                 disable interrupts).
   83                           ;               The previous interrupt state
                                 is restored by copying 'cpu_sr' into the CPU's
                                 status register.
   84                           ;
   85                           ; Prototypes  : CPU_SR  CPU_SR_Save  
                                 (void);
   86                           ;               void    CPU_SR_Restore(CPU_SR 
                                 cpu_sr);
   87                           ;
   88                           ; Note(s)     : (1) These functions are used
                                 in general like this :
   89                           ;
   90                           ;                       void  Task (void 
                                 *p_arg)
   91                           ;                       {
   92                           ;                           CPU_SR_ALLOC();   
                                                  /* Allocate storage for CPU
                                 status register */
   93                           ;                               :
   94                           ;                               :
   95                           ;                           CPU_CRITICAL_ENTER
                                ();               /* cpu_sr = CPU_SR_Save();   
                                               */
   96                           ;                               :
   97                           ;                               :
   98                           ;                           CPU_CRITICAL_EXIT(
                                );                /* CPU_SR_Restore(cpu_sr);   
                                               */
   99                           ;                               :
  100                           ;                       }
  101                           ;*********************************************
                                ***********************************************
                                ************
  102                           
  103                           CPU_SR_Save
  104    00000008 EFF31080              MRS     R0, PRIMASK                    
                                                 ; Set prio int mask to mask
                                                 all (except faults)
  105    0000000C 72B6                  CPSID   I
  106    0000000E 7047                  BX      LR
  107                           
  108                           
  109                           CPU_SR_Restore                                
                                  ; See Note #2.
  110    00000010 80F31088              MSR     PRIMASK, R0
  111    00000014 7047                  BX      LR
  112                           
  113                           
  114                           ;$PAGE
  115                           ;*********************************************
                                ***********************************************
                                ************
  116                           ;                                        
                                 CPU_CntLeadZeros()
  117                           ;                                        COUNT
                                 LEADING ZEROS
  118                           ;
  119                           ; Description : Counts the number of
                                 contiguous, most-significant, leading zero
                                 bits before the first 
  120                           ;                   binary one bit in a data
                                 value.
  121                           ;
  122                           ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU
                                _DATA  val);
  123                           ;
  124                           ; Argument(s) : val         Data value to
                                 count leading zero bits.
  125                           ;
  126                           ; Return(s)   : Number of contiguous,
                                 most-significant, leading zero bits in
                                 'val'.
  127                           ;
  128                           ; Caller(s)   : Application.
  129                           ;
  130                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application function(s).
  131                           ;
  132                           ; Note(s)     : (1) If the argument is zero,
                                 the value 32 is returned.
  133                           ;
  134                           ;               (2) MUST be implemented in
                                 cpu_a.asm if and only if CPU_CFG_LEAD_ZEROS_AS
                                M_PRESENT is 
  135                           ;                   #define'd in 'cpu_cfg.h'
                                 or 'cpu.h'.
  136                           ;*********************************************
                                ***********************************************
                                ************
  137                           
  138                           CPU_CntLeadZeros:
  139    00000016 B0FA80F0              CLZ     R0, R0                         
                                                 ; Count leading zeros
  140    0000001A 7047                  BX      LR
  141                           
  142                           
  143                           ;*********************************************
                                ***********************************************
                                ************
  144                           ;                                            
                                 REVERSE BITS
  145                           ;
  146                           ; Description : Reverses the bits in the
                                 argument.
  147                           ;
  148                           ; Prototypes  : CPU_DATA  CPU_RevBits
                                 (CPU_DATA  val)
  149                           ;
  150                           ; Argument(s) : val     variable to reverse
  151                           ;*********************************************
                                ***********************************************
                                ************
  152                           
  153                           CPU_RevBits:
  154    0000001C 90FAA0F0              RBIT    R0, R0                         
                                                 ; Reverse bits
  155    00000020 7047                  BX      LR
  156                           
  157                           
  158                           ;$PAGE
  159                           ;*********************************************
                                ***********************************************
                                ************
  160                           ;                                         WAIT
                                 FOR INTERRUPT
  161                           ;
  162                           ; Description : Enters sleep state, which will
                                 be exited when an interrupt is received.
  163                           ;
  164                           ; Prototypes  : void  CPU_WaitForInt
                                 (void)
  165                           ;
  166                           ; Argument(s) : none.
  167                           ;*********************************************
                                ***********************************************
                                ************
  168                           
  169                           CPU_WaitForInt:
  170    00000022 30BF                  WFI                                    
  ; Wait for interrupt
  171    00000024 7047                  BX      LR
  172                           
  173                           
  174                           ;*********************************************
                                ***********************************************
                                ************
  175                           ;                                         WAIT
                                 FOR EXCEPTION
  176                           ;
  177                           ; Description : Enters sleep state, which will
                                 be exited when an exception is received.
  178                           ;
  179                           ; Prototypes  : void  CPU_WaitForExcept
                                 (void)
  180                           ;
  181                           ; Argument(s) : none.
  182                           ;*********************************************
                                ***********************************************
                                ************
  183                           
  184                           CPU_WaitForExcept:
  185    00000026 20BF                  WFE                                    
  ; Wait for exception
  186    00000028 7047                  BX      LR
  187                           
  188                           
  189                           ;$PAGE
  190                           ;*********************************************
                                ***********************************************
                                ************
  191                           ;                                     CPU
                                 ASSEMBLY PORT FILE END
  192                           ;*********************************************
                                ***********************************************
                                ************
  193                           
  194                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 42          #
##############################



